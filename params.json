{"name":"Feignjs","tagline":"feign-like rest client for js","body":"# Feign.js [![Build Status](https://travis-ci.org/feignjs/feignjs.svg)](https://travis-ci.org/feignjs/feignjs) [![Coverage](https://img.shields.io/codecov/c/github/feignjs/feignjs.svg?style=flat-square)](https://codecov.io/github/feignjs/feignjs?branch=master)\r\nDeclarative flexible Restclient-bridge that enables to easily define rest-client \r\nfor node. It is based on the java-implementation of feign [from netflix](https://github.com/Netflix/feign).\r\n\r\n`Remark:` this library is not affiliated to netflix\r\n\r\n## Overview\r\nFeign.js  allows to define a rest-client api and staying independent of a specific client-implementation. \r\nIt tries to solve three issues:\r\n\r\nFirst point is to have a **central location** where you define all api-calls of a client,\r\nparameters, headers and so on, so in your business-code, you just call the generated \r\nfunction. \r\n\r\nSecond point is to stay **independent** of a client (e.g. you can later switch to \r\nanother one that supports a feature you may need). \r\n\r\nThird point is that you can now start implementing **unforseen requirements** like \r\nresilience (e.g. using a circuitBreaker) later on without changing your application \r\nat all (this feature is planned for later versions though).\r\n\r\nCurrently, following clients are supported:\r\n* [Request](https://github.com/request/request) ([`feignjs-request`](https://github.com/feignjs/feignjs-request) module for node)\r\n* [JQuery](https://jquery.com/) ([`feignjs-jquery`](https://github.com/feignjs/feignjs-jquery) module for node or bower)\r\n* Node([`feignjs-node`](https://github.com/feignjs/feignjs-node)  module using `http`-module of node)\r\n* Xhr([`feignjs-xhr`](https://github.com/feignjs/feignjs-node)  module using plain xhr in browser)\r\n \r\n\r\n## Changelog\r\n\r\n* **0.0.5** browserified apps can now use feignjs, updated uri-template-dependency for transitivity\r\n* **0.0.4** first public release\r\n\r\n \r\n## Installation\r\nYou need to install both feignjs and a client to be used for feign.\r\n\r\n```\r\nnpm install feignjs\r\nnpm install feignjs-<client>\r\n```\r\n\r\nor with bower\r\n\r\n```\r\nbower install feignjs\r\nbower install feignjs-<client>\r\n```\r\n\r\n## Features:\r\n* path-parameter support ([rfc6570](https://tools.ietf.org/html/rfc6570))\r\n* very flexible api:\r\n * promise or callback style, however you want it\r\n * flexible parameters: can be named or unnamed. (`client.getUser(1)` or `client.getUser({id:1})`)\r\n \r\n## Getting started\r\nSimilar to [Feign](https://github.com/Netflix/feign), the api will be described \r\ndeclaratively and then reflectively instantiated.\r\n\r\n```javascript\r\nvar apiDescription = {\r\n  getUsers: 'GET /users',\r\n  getUser: 'GET /users/{id}',\r\n  createPost: 'POST /posts',\r\n  modifyPost: 'PUT /posts/{id}',\r\n};\r\n\r\nvar client = feign.builder()\r\n        .client(new FeignRequest())        \r\n        .target(apiDescription, 'http://jsonplaceholder.typicode.com');\r\n\r\n        \r\nclient.modifyPost(1, {content: 'new text'}).then(console.log)\r\n```\r\nsee more examples in the [samples-folder](samples)\r\n\r\n## Format\r\nThe description of clients is mostly intuitive. it can be given as plain string or object.\r\n The format supports uri-templates based on ([rfc6570](https://tools.ietf.org/html/rfc6570)), so you can even use more complicate formats:\r\n\r\n```javascript\r\nvar apiDescription = {\r\n  getUsers: 'GET /users',\r\n  getUser: 'GET /users/{id}',\r\n  getPosts: 'POST /posts{?count,order}',\r\n  modifyPost: {\r\n    method: 'PUT',\r\n    uri: '/posts{/id}'\r\n  }\r\n  \r\n};\r\n```\r\n\r\n\r\n## Usage\r\nThe generated client contains methods to call the described api-endpoints. \r\nDepending on the Http-method and the path-parameters the format will vary. \r\n```\r\nclient.method([path-parameters], [body/query/post-parameter-object], [callback-function]);\r\n```\r\n* Path-parameters can be comma-separated or an object with named parameters\r\n* parameter-object: the object after path-parameters will be used as body or query-parameter object, depending on your configuration. \r\npath-parameters means here all parameters that are used in the uri-template.\r\n* callback-function: if you configured the builder to use callback-style, then the last parameter will be used as callback function of format `function(error, result)`\r\n\r\nSome examples:\r\n```javascript\r\n//GET /users/{id}\r\nclient.getUser(1)\r\nclient.getUser({id: 1})\r\n\r\n//PUT /posts/{id}\r\nclient.modifyPost(1, newPost);\r\nclient.modifyPost({id: 1}, newPost);\r\n//or if you configured callbacks:\r\nclient.modifyPost({id: 1}, newPost, onResult);\r\n\r\n//POST /posts{?count,order}\r\nclient.getPosts({count: 10, order: 'ASC'});\r\n\r\n```\r\n\r\n \r\n ## Options:\r\n an option-object can be fed into feign.builder() with following options:\r\n \r\n| Option | Note | default\r\n|---|---|---|\r\n| promise | crate a promise-based api. false for callback-based api. | true |\r\n\r\n\r\n## Extension\r\n//TODO\r\n* Request Interceptors\r\n* custom clients","google":"UA-64038449-1","note":"Don't delete this file! It's used internally to help with page regeneration."}